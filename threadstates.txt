


//  Starvation is where the thread gets no resources because we take resources away everytime
//  Deadlock is where it is stuck and cannot access resources as all resources are in-use 
//  	standoff
//  Livelock is where it doesn't use resources can change between process stayes but makes
//  	no progress in the process

/*
 *  Dining Philosphers: 
 *	Circular table 
 *	We have (N) number of philosphers at the table:
 *		In front of each is a bowl of rice
 *		In between each pair sits a single chopstick
 *	Philospher needs 2 basic tasks:
 *		Think - between eating
 *		Eat - between thinking with both chopsticks
 *	A chopstick can only be held by one philospher:
 *		Can only eat if they have both copsticks
 *	Solution:
 *		Right handed
 *		Thinking until right chopstick is available
 *		Each chopstick to the philospher's right is available. they pick it up
 *		Continue thinking until they left chopstick is available
 *		--- This doesn't work, the left is never available, preventing from eating
 *			Think until starving to death
 *		** Caused by DEADLOCK **
 *
 *	Real solution:
 *		Each philospher as a thread and chopsticks as mu-tex
 *		Introduce a Waitor (watch_dog) -- arbitrator solution
 *		Dijkstra's solution is #1 - WE ARE #1!
 *
 *	Dijkstra's Solution:
 *		Enforce ordering on chopsticks
 *		Every philospher picks up the chopstick:
 *			1. closest to them 
 *			2. with the lowest index
 *			-- Causes a race condition, where one of them gets it, other doesnt
 *			A philospher gets two while one does't -- AT LEAST 1 is eating
 *			Process: 
 *				Grab one, and the other is available
 *					At least one gets the second cs and eats
 *				The one with both eats, other think
 *				One is now eating, then finishes and puts them down
 *				Cycle repeats
 *
 */




	



DEADLOCK:
	Requirements: ***** EXAM *****
		1. Hold & Wait
			a) Process or thread holds onto a resource and waits for more
		2. Mutual Exclusion
			a) Does not share the resource it holds onto  -- Being GREEDY
		3. Circular Wait (Cyclicial wait) 
			a) Process has some resource that other resources want, and wants 
				what others have as well. So it waits until the other gives it up
			b) ex: 
				* A wants R1  |  * B has R1
				* B wants R2  |  * A has R2   
				Waits until the other gives up one so that one has both
		4. No preemption 
			a) Cannot interrupt a process' hold on a resource that it wants. 
		
		* Necessary and sufficient: You need all of them, and if one is broken then it is
			broken all together. There would exist no deadlock if one condition is 
			not met. 
		
	
	Resource Allocation Graph:
		1. Is a away to deomondtrate the conditions necessary
		2. Process is anything that is a unit of execution (thread or process) 
		3. Make a picture
			a) Circles represent process
			b) Rectangles represent resources
				* Dots within the resource represent the number of 
					resources of that specific type
			d) Arrows from resources to process indicate resource ownership
				* Rectangles to Circles
			e) Arrows from process to resource represent it wants that resource
				* Circle to Rectangle
		4. We must demonstrate the four requirements within this graph 
			1. 
			2. 
			3. Circular wait: when all resources held, and processes point to
				all other resources which is held by another. 
			4.
	Dealing with Deadlock:
		1. Ignore it! (not recommended)
		2. Detect it and recover from it
		3. Avoid it: Make deadlock impossible by building in safety checks
		4. Prevent it: Short ciruit conditions 
		WE NEED MUTUAL EXCLUSION, and prefer NOT TO PREEMPT NECESSARY RESOURCES
		*
		*
	Breaking Dealock:
		1. Hold and Wait
			a) Processes must get all resources before it begins work - ex: Batch
			b) must release all resources prior to getting new ones - ex: Interactive
			EX: Philosphers
				- ony allowing them to grab both forks if both are available
		2. State Changing:
			Only allow the system to change state if it is safe to do so
				- ex: traffic lights in a busy city, smooth flow to traffic
			Analyze the system state to see if it is safe
			When a request comes in, examine the current state/allocation and 
			maximum claim	
				- Grabbing 6 packets of ketchup, when you really need 4, but worst
				  case scenario
		3. Bankers Algorithim:
			look at current state and determine if it is a safe/unsafe state
			Respurce Allocation State: 
				- Total number of resources in the system
					- What are available overall
				- Number of allocated resources
					- What has been given out already
				- Maximum resource claim of a process
					- Worst case, how many resources might a process need?
			Can determine safe state or if ia request puts us in a safe state
			Bankers Algorithim Data Structure
				Vector C: number of resources of type r (i.e. total 8GB of RAM)
				Matrix A: Number of resources of type r allocated to process p
				Matrix M: M[p][r]: max # of r needed by p
			EX:
				5 processes p
				4 resources - v[5,6,8,4] -
					 ex: 5 TB of storage, 6 cores, 8 gb ram, 4Gbit of Network
				See example slide in 05_deadlock.pdf for chart
				-- could complete resource 3 on slide 14 so it could complete
				  Then P3 will return its resources to the system
				-- Next we give P1 resources, then it releases its max claim
				--  Next P2 gets resources, frees those
				-- then we give P4, it completes and frees
				-- Finally P5 gets what it needs and frees it all
				All processes completed, all resources freed, it is safe
			EX: same as above but back at begining where resources have been allocated
				But now, P1 requests 2 units of r4, 
				M	       A		   Need
			3 | 2 | 2 | 2    2 | 1 | 1 | 1       1 | 1 | 1 | 0  
			2 | 1 | 1 | 2    0 | 1 | 1 | 0       2 | 0 | 0 | 2
 			1 | 1 | 3 | 1    1 | 1 | 1 | 0	     0 | 0 | 2 | 1
			3 | 4 | 2 | 2 	 1 | 1 | 2 | 1	     2 | 3 | 0 | 1
			2 | 4 | 1 | 2    1 | 2 | 1 | 1	     1 | 2 | 0 | 3
			
				Remaining Available: ( 0, 0, 2, 0 )
				It is an unsafe state since no process could complete with the
				available resources, it is unsafe. 
		
		Detectting Deadlock:
			OS allocates resources when resources are available
			Languages have safety nets, which make them slower, but no apocoplyse 
			Can lead to deadlock, but we need a detection algorithim to detect DL
			  because we cannot gurantee DL will not occur
			Methods: 
				- Check on every allocation (early detection) -- VERY SLOW, valgrind
				- Check the RAG (very hard with multiple copies of same resource)
					* 5 keys to a room, 5 people have a key, hard to tell! 
					* How do you know when to use the algorithim? 
				- ID deadlock processes - How do we know it is deadlocked, and is 
				    just waiting for resources? 
					* Windows "This program has stopped responding prompt" 
		Recovering from Deadlock:
			kill -9 (With fire) 
			but wait, there's more
				other processes could be Deadlocked too, kill them all.
				The children too. 

